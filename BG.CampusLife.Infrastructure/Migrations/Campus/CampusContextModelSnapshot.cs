// <auto-generated />
using System;
using BG.CampusLife.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BG.CampusLife.Infrastructure.Migrations.Campus
{
    [DbContext(typeof(CampusContext))]
    partial class CampusContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MimeType")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Friend", b =>
                {
                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Country")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DoorNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("State")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Visited")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("post_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("post_type").HasValue("post_base");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ControlType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedKey")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId3")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId4")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId5")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId6")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId7")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId8")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId9")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.HasIndex("UserId3");

                    b.HasIndex("UserId4");

                    b.HasIndex("UserId5");

                    b.HasIndex("UserId6");

                    b.HasIndex("UserId7");

                    b.HasIndex("UserId8");

                    b.HasIndex("UserId9");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.SharedCalendar", b =>
                {
                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SharedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SharedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SharedCalendars");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Graduated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Graduation")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HomeLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MainMajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("MarriageStatus")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("NationalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedAdditionalEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedPersonalEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HomeLocationId");

                    b.HasIndex("ImageId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MainMajorId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.UserProperty", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProperties");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Event", b =>
                {
                    b.HasBaseType("BG.CampusLife.Domain.Entities.Post");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("event_details");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Blog", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Calendar", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Category", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BG.CampusLife.Domain.Entities.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Document", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.Post", null)
                        .WithMany("Attachments")
                        .HasForeignKey("PostId");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Friend", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.User", "FriendNavigation")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BG.CampusLife.Domain.Entities.User", "UserNavigation")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FriendNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Notification", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Post", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BG.CampusLife.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BG.CampusLife.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Property", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("Activities")
                        .HasForeignKey("UserId");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("Awards")
                        .HasForeignKey("UserId1");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("Certificates")
                        .HasForeignKey("UserId2");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("EducationalBackground")
                        .HasForeignKey("UserId3");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("GoodAt")
                        .HasForeignKey("UserId4");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("Hobbies")
                        .HasForeignKey("UserId5");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("InterestedAt")
                        .HasForeignKey("UserId6");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("Majors")
                        .HasForeignKey("UserId7");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("Sports")
                        .HasForeignKey("UserId8");

                    b.HasOne("BG.CampusLife.Domain.Entities.User", null)
                        .WithMany("WorkExperience")
                        .HasForeignKey("UserId9");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.SharedCalendar", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.User", "SharedNavigation")
                        .WithMany()
                        .HasForeignKey("SharedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BG.CampusLife.Domain.Entities.User", "UserNavigation")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SharedNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.University", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.User", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.Property", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("BG.CampusLife.Domain.Entities.Location", "HomeLocation")
                        .WithMany()
                        .HasForeignKey("HomeLocationId");

                    b.HasOne("BG.CampusLife.Domain.Entities.Document", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("BG.CampusLife.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("BG.CampusLife.Domain.Entities.Property", "MainMajor")
                        .WithMany()
                        .HasForeignKey("MainMajorId");

                    b.HasOne("BG.CampusLife.Domain.Entities.Location", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("BG.CampusLife.Domain.Entities.University", "University")
                        .WithMany("Users")
                        .HasForeignKey("UniversityId");

                    b.Navigation("Department");

                    b.Navigation("HomeLocation");

                    b.Navigation("Image");

                    b.Navigation("Location");

                    b.Navigation("MainMajor");

                    b.Navigation("Nationality");

                    b.Navigation("University");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.UserProperty", b =>
                {
                    b.HasOne("BG.CampusLife.Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BG.CampusLife.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.Post", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.University", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BG.CampusLife.Domain.Entities.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Awards");

                    b.Navigation("Blogs");

                    b.Navigation("Certificates");

                    b.Navigation("EducationalBackground");

                    b.Navigation("GoodAt");

                    b.Navigation("Hobbies");

                    b.Navigation("InterestedAt");

                    b.Navigation("Majors");

                    b.Navigation("Posts");

                    b.Navigation("Sports");

                    b.Navigation("WorkExperience");
                });
#pragma warning restore 612, 618
        }
    }
}
